{"version":3,"sources":["components/Stats.js","components/Stopwatch.js","components/Header.js","components/PlayerCounter.js","components/Player.js","components/AddPlayerForm.js","components/App.js","index.js"],"names":["Stats","props","totalPlayers","players","length","totalPoints","reduce","acc","player","score","react_default","a","createElement","className","Stopwatch","state","isRunning","previousTime","elapsedTime","tick","_this","now","Date","setState","prevState","handleStopwatch","isInitialized","setInterval","handleReset","clearInterval","this","intervalID","seconds","Math","floor","onClick","Component","Header","letters","letter","changeLetter","newLetters","filter","l","newletter","random","undefined","_this$props","title","components_Stats","components_Stopwatch","PlayerCounter","_ref","updateScore","index","Player","playerName","playerScore","removePlayer","isHighScore","id","viewBox","d","transform","width","height","components_PlayerCounter","PureComponent","AddPlayerForm","addPlayer","playerInput","React","createRef","onSubmit","e","preventDefault","current","value","currentTarget","reset","type","ref","placeholder","App","name","lastPlayerId","handleRemovePlayer","p","handleAddPlayer","concat","Object","toConsumableArray","delta","map","objectSpread","checkHighScore","highestScore","curr","_this2","components_Header","components_Player","key","toString","components_AddPlayerForm","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.902ccfb3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Stats = (props) => {\r\n\r\n  const totalPlayers = props.players.length; \r\n  const totalPoints = props.players.reduce( (acc, player) => { return acc + player.score }, 0)\r\n\r\n\r\n  return (\r\n    <table className=\"stats\">\r\n      <tbody>\r\n        <tr>\r\n          <td>Jugadores:</td>\r\n          <td>{totalPlayers}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Puntos Totales:</td>\r\n          <td>{totalPoints}</td>\r\n        </tr>\r\n        </tbody>\r\n    </table>\r\n  );\r\n\r\n}\r\n\r\nexport default Stats;","import React, { Component } from 'react';\r\n\r\nclass Stopwatch extends Component {\r\n\r\n  state = {\r\n    isRunning: false,\r\n    previousTime: 0,\r\n    elapsedTime: 0\r\n  }\r\n\r\n  tick = () => {\r\n    if (this.state.isRunning) {\r\n      const now = Date.now();\r\n      this.setState( prevState => ({\r\n        previousTime: now,\r\n        elapsedTime: prevState.elapsedTime + (now - prevState.previousTime)\r\n      }));\r\n    }\r\n  }\r\n\r\n  handleStopwatch = () => {\r\n\r\n    if (!this.state.isInitialized) { \r\n      let intervalID = setInterval( () => this.tick(), 100);\r\n    }\r\n\r\n    this.setState( prevState => ({\r\n      isRunning: !prevState.isRunning\r\n    }));\r\n    if (!this.state.isRunning) {\r\n      this.setState({ previousTime: Date.now() });\r\n\r\n    }\r\n  }\r\n\r\n  handleReset = () => {\r\n    this.setState({\r\n      elapsedTime: 0\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.intervalID);\r\n  }\r\n\r\n  render() {\r\n\r\n    const seconds = Math.floor( this.state.elapsedTime / 1000 );\r\n\r\n    return (\r\n      <div className=\"stopwatch\">\r\n        <h2>Reloj</h2>\r\n        <span className=\"stopwatch-time\">{ seconds }</span>\r\n        <button onClick={this.handleStopwatch}>\r\n          { this.state.isRunning ? 'Parar' : 'Iniciar' }\r\n        </button>\r\n        <button onClick={this.handleReset}>Resetear</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Stopwatch;","import React, { Component } from 'react';\r\nimport Stats from './Stats';\r\nimport Stopwatch from './Stopwatch';\r\n\r\n/**\r\n * Displays the title and total players\r\n */\r\nclass Header extends Component {\r\n  \r\n  state = {\r\n    letters: [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"],\r\n    letter: \"A\"\r\n  }\r\n\r\n  changeLetter = () => {\r\n    this.setState(prevState => {\r\n      const newLetters = prevState.letters.filter( l => l !== prevState.letter);\r\n      let newletter = newLetters[Math.floor(Math.random() * newLetters.length)];\r\n      if (newletter === undefined) newletter = \"---\";\r\n\r\n      return {\r\n        letters: newLetters,\r\n        letter: newletter\r\n      }\r\n  \r\n    });\r\n    \r\n  }\r\n  \r\n\r\n  render() {\r\n    const { title, players } = this.props;\r\n    return (\r\n    <header>\r\n      <Stats players={players} />\r\n      <div className=\"subheader\">\r\n        <h1>{ title }</h1>\r\n        <h2>Letra Actual: <span className=\"letter\">{this.state.letter}</span></h2>\r\n        <button onClick={this.changeLetter}>Nueva Letra</button>\r\n      </div>\r\n      <Stopwatch />\r\n    </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\n/**\r\n * Displays the score counter, adds or substracts to it \r\n * if the corresponding buttons are interacted with\r\n */\r\n\r\nconst PlayerCounter = ({ score, updateScore, index }) => {\r\n\r\n  return (\r\n    <div className=\"counter\">\r\n      <button className=\"counter-action decrement\" onClick={() => updateScore(index, -1)}> - </button>\r\n      <span className=\"counter-score\">{ score }</span>\r\n      <button className=\"counter-action increment\" onClick={() => updateScore(index, 1)}> + </button>\r\n    </div>\r\n  );\r\n  \r\n}\r\n\r\nexport default PlayerCounter;","import React, { PureComponent } from 'react';\r\nimport PlayerCounter from './PlayerCounter';\r\n\r\nclass Player extends PureComponent {\r\n\r\n  render() {\r\n    const {playerName, playerScore, removePlayer, updateScore, isHighScore, id, index} = this.props;\r\n    return (\r\n      <div className=\"player\">\r\n        <span className=\"player-name\">\r\n          <button className=\"remove-player\" onClick={ () => removePlayer(id) }>✖</button>\r\n          <svg className={isHighScore ? \"is-high-score\" : null} viewBox=\"0 0 44 35\">\r\n            <path d=\"M26.7616 10.6207L21.8192 0L16.9973 10.5603C15.3699 14.1207 10.9096 15.2672 7.77534 12.9741L0 7.24138L6.56986 28.8448H37.0685L43.5781 7.72414L35.7425 13.0948C32.6685 15.2672 28.3288 14.0603 26.7616 10.6207Z\" transform=\"translate(0 0.301727)\"/>\r\n            <rect width=\"30.4986\" height=\"3.07759\" transform=\"translate(6.56987 31.5603)\"/>\r\n          </svg>\r\n          {playerName}\r\n        </span>\r\n  \r\n        <PlayerCounter \r\n          score={playerScore}\r\n          updateScore={updateScore}\r\n          index={index}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Player;","import React from 'react';\r\n\r\nconst AddPlayerForm = ({ addPlayer }) => {\r\n\r\n  const playerInput = React.createRef();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    //TODO: agregar validación de longitud de nombre para que no rompa\r\n    addPlayer(playerInput.current.value);\r\n    e.currentTarget.reset();\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input \r\n        type=\"text\"\r\n        ref={playerInput}\r\n        placeholder=\"Ingrese un nuevo jugador\"\r\n      />\r\n      <input \r\n        type=\"submit\"\r\n        value=\"Agregar\"\r\n      />\r\n    </form>\r\n    );\r\n  \r\n}\r\n\r\nexport default AddPlayerForm;","import React, { Component } from 'react';\nimport Header from './Header';\nimport Player from './Player';\nimport AddPlayerForm from './AddPlayerForm';\n\nclass App extends Component {\n\n  state = {\n    players: [\n      {\n        name: \"Axel\",\n        score: 0,\n        id: 1\n      },\n      {\n        name: \"Carlos\",\n        score: 0,\n        id: 2\n      },\n      {\n        name: \"Nelson\",\n        score: 0,\n        id: 3\n      },\n      {\n        name: \"Salem\",\n        score: 0,\n        id: 4\n      }\n    ]\n  }\n\n  lastPlayerId = 4;\n\n  /**\n   * Takes a player ID and removes it from the players array, updating state \n   * @param {number} id The player's ID\n   */\n  handleRemovePlayer = (id) => {\n    this.setState( prevState => ({\n      players: prevState.players.filter( p => p.id !== id )\n    }));\n  }\n\n  /**\n   * Adds a new player to the players array in app state\n   * @param {string} name The text the user submitted in the <AddPlayerForm/> form\n   */\n  handleAddPlayer = (name) => {\n    this.setState( prevState => ({\n      players: [\n        ...prevState.players,\n        {\n          name,\n          score: 0,\n          id: this.lastPlayerId += 1\n        }\n      ]\n    }));\n  }\n\n  /**\n   * Changes the score of the player based on user input\n   * @param {number} index The player's ID\n   * @param {number} delta The amount to increase or decrease the score by\n   * \n   */\n  updateScore = (index, delta) => {\n    if (delta < 0 && this.state.players[index].score <= 0) return;\n    this.setState( prevState => {\n      \n      let newState = {\n        players: prevState.players.map( p => {\n          if (p !== prevState.players[index]) {\n            return { ...p }\n          } else {\n            return {\n              ...p,\n              score: p.score += delta\n            }\n          }\n        })\n      }\n\n      return newState;\n    });\n  }\n\n  /**\n   * Searchs for the highest score among the players and sets a\n   * global state stating which score is that\n   */\n  checkHighScore = () => {\n    let highestScore = this.state.players.reduce( (acc, curr) => {\n      if (curr.score > acc) { return curr.score; } else { return acc; }\n    }, 0);\n\n    if (highestScore > 0) {return highestScore;} else {return null;}\n\n  }\n\n  render() {\n    return (\n      <div className=\"scoreboard\">\n        <Header \n          title=\"Tablero\"\n          players={this.state.players}\n        />\n\n        {/* Player list */}\n        { this.state.players.map( (player, index) => \n          <Player \n            playerName={player.name}\n            playerScore={player.score}\n            key={player.id.toString()}\n            removePlayer={this.handleRemovePlayer}\n            updateScore={this.updateScore}\n            checkHighScore={this.checkHighScore}\n            isHighScore={this.checkHighScore() === player.score}\n            id={player.id}\n            index={index}\n          />\n        )}\n\n        <AddPlayerForm addPlayer={this.handleAddPlayer} />\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\nimport './index.css';\n\nReactDOM.render(\n  <App />, \n  document.getElementById('root')\n);\n"],"sourceRoot":""}